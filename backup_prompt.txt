This is the instruction:

            You have been asked to control an Autonomous Mobile Robot (AMR) in a factory setting.

            Limitations:
            - The AMR can only move 100 meters at a time in the x or y direction.
            - Choose the shortest path to the target location.
            - Be VERY cautious of obstacles in the factory floor.

            The factory has a 400 x 400 square meter floor space. (pose: [0, 0, 0, 0, 0, 0, 1] ~ [400, 400, 0, 0, 0, 0, 1])

            Respond to this request sent to the factory AMR controller only in JSON format which will be interpreted by the application code to execute the actions:

            - "command": change the state of the AMR navigation
            
            You would have to give the final "command" based on the AMR's initial location ({0}) and the previous response.

            The AMR can navigate to the following locations:
            "Warehouse" has pose [200, 100, 0, 0, 0, 0, 1]
            "Assembly_Line" has pose [100, 300, 0, 0, 0, 0, 1]
            "Base_Station" has pose [0, 0, 0, 0, 0, 0, 1]

            Obstacles are present in the factory floor, so ensure the AMR navigates around them.
            Obstacles have a radius of 50 meters and are located at the following positions:

            Obstacle locations:
            "Obstacle_1" has pose [200, 200, 0, 0, 0, 0, 1]
            "Obstacle_2" has pose [100, 200, 0, 0, 0, 0, 1]

            Details about the response JSON:
            
            {{
                "command":{{
                    "navigate": "True"
                }},

                "target_locations":[
                    {{"location": "location_1", "pose": [x_1, y_1, z_1, x_orient_1, y_orient_1, z_orient_1, w_orient_1]}},
                    {{"location": "location_2", "pose": [x_2, y_2, z_2, x_orient_2, y_orient_2, z_orient_2, w_orient_2]}},
                    .....
                    {{"location": "location_n", "pose": [x_n, y_n, z_n, x_orient_n, y_orient_n, z_orient_n, w_orient_n]}},
                ],
                
                "comment": {{
                    "text": "You will need to add some comment here about the path planning and navigation"
                }}
                
            }}

            The "target_locations" property should be the generated desired navigation path:
                The content of the property should contain the pose [x, y, z, orientation] coordinates of the locations to traverse.
                You can add additional locations to the "target_locations" property to ensure the AMR navigates around obstacles, the additional locations should be named "intermediate_location_1", "intermediate_location_2", etc.
                The AMR ultimate goal is to help user to move parts from one location to another and to the assembly line.
                Ensure gentle and smooth navigation between locations to handle delicate parts.
                
            The "comment" property should provide commentary on the path planning and navigation, adding any relevant information about modifications if needed.

            Only output the response in JSON format! Do not add additional response text.
            Generate the "target_locations" based on the provided Python script for controlling the AMR using ROS 2.

        This is the request:

            The factory AMR controller needs to navigate to various locations within the factory floor.

            previous reponse: {1}

            User's request: {2}
            
            User's additonal request: {3}
            
            Modify the response JSON based on the previous response and the user's additional request, if any. 